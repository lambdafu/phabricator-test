#!/usr/bin/env php
<?php

$root = dirname(dirname(__FILE__));
require_once $root.'/phabricator/scripts/__init_script__.php';

# list of status:
# open, resolved, wontfix, invalid, duplicate, spite

# list of priorities:
# unbreak, triage, high, normal, low, wish, wishlist
$p2k = ManiphestTaskPriority::getTaskPriorityKeywordsMap();
$k2p = array();
foreach($p2k as $prio => $kwlist) {
	foreach($kwlist as $kw) {
		$k2p[$kw] = $prio;
	}
}

const TRANSACTION_TYPES = [
	'title' => ManiphestTransaction::TYPE_TITLE,
	'description' =>  ManiphestTransaction::TYPE_DESCRIPTION,
	'owner' => ManiphestTransaction::TYPE_OWNER,
	'status' => ManiphestTransaction::TYPE_STATUS,
	'priority' => ManiphestTransaction::TYPE_PRIORITY,
	'add_comment' => PhabricatorTransactions::TYPE_COMMENT,
	'add_member' => PhabricatorTransactions::TYPE_SUBSCRIBERS,
	'project' => PhabricatorTransactions::TYPE_EDGE,
	'parent' =>  PhabricatorTransactions::TYPE_EDGE,
	'due-date' => PhabricatorTransactions::TYPE_CUSTOMFIELD
];

const TRANSACTION_EDGE_TYPES = [
	'project' => PhabricatorProjectObjectHasProjectEdgeType::EDGECONST,
	'parent' => ManiphestTaskDependedOnByTaskEdgeType::EDGECONST
];

# Main

if ($argc !== 2) {
	echo pht(
		"Usage: %s\n",
		'import-tasks <tasks.json>');
	exit(1);
}

$jsonfile = $argv[1];
$json = file_get_contents($jsonfile, true);
$data = json_decode($json);

# Ass. array $task, $change.
$all_changes = array();
foreach($data as $task) {
	create_task((array)$task);
}

# Afterwards, we create changes, because adding task relationships
# requires the task to exist.
usort($all_changes, function ($item1, $item2) {
    return $item1['change']['ts'] <=> $item2['change']['ts'];
});
foreach($all_changes as $change) {
	create_change($change['task'], $change['change']);
}

function create_task($task) {
	global $k2p;
	global $all_changes;

	$id = $task['id'];
	$ts = $task['ts'];
	$author = getUserByName($task['author']);
	$description = $task['description'];
	$title = $task['title'];

	$priority = ManiphestTaskPriority::getDefaultPriority();
	if (isset($task['priority'])) {
		$priority = $k2p[$task['priority']];
	}

	echo pht("importing: %s", $id)."\n";

	# Destroy old.

	$viewer = id(PhabricatorUser::getOmnipotentUser());
	$object_names = ['T' . (string)$id];
	$object_query = id(new PhabricatorObjectQuery())
		->setViewer($viewer)
		->withNames($object_names);
	$object_query->execute();
	$named_objects = $object_query->getNamedResults();
	foreach ($named_objects as $object_name => $object) {
		echo pht(
			"Destroying %s **%s**...\n",
			get_class($object),
			$object_name)."\n";

		id(new PhabricatorDestructionEngine())
			->destroyObject($object);
	}

	# Create new.

	$task_obj = ManiphestTask::initializeNewTask($author)
		->setTitle($title)
		->setAuthorPHID($author->getPHID())
		->setStatus(ManiphestTaskStatus::getDefaultStatus())
		->setPriority((int)$priority)
		->setDescription($description)
		->setDangerousOverrideTimeStamp($ts)
		->setDangerousOverrideID($id);

	if (isset($task['owner'])) {
		$owner = getUserByName($task['owner']);
		$task_obj->setOwnerPHID($owner->getPHID());
	}

	$task_obj->save();

	if (isset($task['changes'])) {
		foreach($task['changes'] as $change) {
			$all_changes[] = ['task' => $task, 'change' => (array)$change ];
		}
	}

	echo pht('imported: %s', $id)."\n";
}

function create_change($task, $change) {
	global $k2p;

	$task_obj = getTaskById($task['id']);

	$ts = $change['ts'];
	$author = getUserByName($change['author']);
	$typename = $change['type'];
	$type = TRANSACTION_TYPES[$typename];
	$value = $change['value'];

	echo pht("change: %s: %s: %s", $task['id'], $ts, $typename)."\n";

	$action = id(new ManiphestTransaction())
		->setTransactionType($type)
		->setDangerousOverrideTimeStamp($ts);

	# Reinterpret value according to type.
	if ($typename == 'owner') {
		$owner = getUserByName($value);
		$value = $owner->getPHID();
	} else if ($typename == 'project') {
		if (gettype($value) != "array") {
			$value = [$value];
		}
		$phids = array();
		foreach ($value as $pname) {
			$phid = getProjectByName($pname)->getPHID();
			$phids[$phid] = $phid;
		}
		$value = array($change['method'] => array($phid => $phid));
	} else if ($typename == 'parent') {
		if (gettype($value) != "array") {
			$value = [$value];
		}
		$phids = array();
		foreach ($value as $tid) {
			$phid = getTaskById($tid)->getPHID();
			$phids[$phid] = $phid;
		}
		$value = array($change['method'] => $phids);
	} else if ($typename == 'priority') {
		$value = $k2p[$value];
	} else if ($typename == 'due-date') {
		$field_list = PhabricatorCustomField::getObjectFields(
			$task_obj,
			PhabricatorCustomField::ROLE_EDIT);
			$field_list->readFieldsFromStorage($task_obj);
			$fields = $field_list->getFields();
			$action->setMetadataValue('customfield:key',
				'std:maniphest:semantics.due-date');
			$oldvalue = $fields['std:maniphest:semantics.due-date']
				->getOldValueForApplicationTransactions();
			$action->setOldValue($oldvalue);
	}

	# Type depend fixups
	if (array_key_exists($typename,TRANSACTION_EDGE_TYPES)) {
		$edge_type = TRANSACTION_EDGE_TYPES[$typename];
		$action->setMetadataValue('edge:type', $edge_type);
	}

	if ($type == PhabricatorTransactions::TYPE_COMMENT) {
		$action->attachComment(
			id(new ManiphestTransactionComment())
			->setContent($value));
	} else {
		$action->setNewValue($value);
	}

	$content_source = PhabricatorContentSource::newForSource(
		PhabricatorConsoleContentSource::SOURCECONST);

	$transactions = array();
	$transactions[] = $action;

	$task_obj->openTransaction();
	$editor = id(new ManiphestTransactionEditor())
		->setActor($author)
		->setContentSource($content_source)
		->setContinueOnNoEffect(true)
		->setContinueOnMissingFields(true)
		->applyTransactions($task_obj, $transactions);
	$task_obj->saveTransaction();
}

function getTaskById($id) {
	$project = id(new ManiphestTask())
		->loadOneWhere('id = %s',$id);

	if(!$project) {
		throw new Exception(sprintf("Task w/ id '%d' not found", $id));
	}

	return $project;
}

function getProjectByName($name) {
	$project = id(new PhabricatorProject())
		->loadOneWhere('name = %s',$name);

	if(!$project) {
		throw new Exception(sprintf("Project w/ name '%s' not found", $name));
	}

	return $project;
}

function getUserByName($name) {
	$user = id(new PhabricatorUser())
		->loadOneWhere('username = %s', $name);

	if (!$user) {
		throw new Exception(sprintf("User '%s' not found", $name));
	}

	return $user;
}
