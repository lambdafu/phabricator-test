diff --git a/src/applications/maniphest/editor/ManiphestTransactionEditor.php b/src/applications/maniphest/editor/ManiphestTransactionEditor.php
index 0a4ea8469..362b165fb 100644
--- a/src/applications/maniphest/editor/ManiphestTransactionEditor.php
+++ b/src/applications/maniphest/editor/ManiphestTransactionEditor.php
@@ -219,6 +219,7 @@ final class ManiphestTransactionEditor
 
         id(new PhabricatorEdgeEditor())
           ->addEdge($parent_phid, $parent_type, $task_phid)
+	  ->setDangerousOverrideTimeStamp($xaction->getDangerousOverrideTimeStamp())
           ->save();
         break;
       case PhabricatorTransactions::TYPE_COLUMNS:
@@ -266,6 +267,7 @@ final class ManiphestTransactionEditor
         foreach ($blocked_tasks as $blocked_task) {
           $parent_xaction = id(new ManiphestTransaction())
             ->setTransactionType(ManiphestTransaction::TYPE_UNBLOCK)
+	    ->setDangerousOverrideTimeStamp($unblock_xaction->getDangerousOverrideTimeStamp())
             ->setOldValue(array($object->getPHID() => $old))
             ->setNewValue(array($object->getPHID() => $new));
 
@@ -815,10 +817,12 @@ final class ManiphestTransactionEditor
     $is_open = !$object->isClosed();
 
     $new_status = null;
+    $new_status_xaction = null;
     foreach ($xactions as $xaction) {
       switch ($xaction->getTransactionType()) {
         case ManiphestTransaction::TYPE_STATUS:
           $new_status = $xaction->getNewValue();
+          $new_status_xaction = $xaction;
           break;
       }
     }
@@ -839,6 +843,7 @@ final class ManiphestTransactionEditor
       if ($actor_phid && $is_claim) {
         $results[] = id(new ManiphestTransaction())
           ->setTransactionType(ManiphestTransaction::TYPE_OWNER)
+	  ->setDangerousOverrideTimeStamp($new_status_xaction->getDangerousOverrideTimeStamp())
           ->setNewValue($actor_phid);
       }
     }
@@ -894,6 +899,7 @@ final class ManiphestTransactionEditor
         if ($old_value) {
           $results[] = id(new ManiphestTransaction())
             ->setTransactionType(PhabricatorTransactions::TYPE_SUBSCRIBERS)
+	    ->setDangerousOverrideTimeStamp($xaction->getDangerousOverrideTimeStamp())
             ->setIgnoreOnNoEffect(true)
             ->setNewValue(
               array(
diff --git a/src/applications/transactions/editor/PhabricatorApplicationTransactionEditor.php b/src/applications/transactions/editor/PhabricatorApplicationTransactionEditor.php
index eb6f88d65..6494ba348 100644
--- a/src/applications/transactions/editor/PhabricatorApplicationTransactionEditor.php
+++ b/src/applications/transactions/editor/PhabricatorApplicationTransactionEditor.php
@@ -1462,6 +1462,7 @@ abstract class PhabricatorApplicationTransactionEditor
     }
 
     $xaction = newv(get_class(head($xactions)), array());
+    $xaction->setDangerousOverrideTimeStamp(head($xactions)->getDangerousOverrideTimeStamp());
     $xaction->setTransactionType(PhabricatorTransactions::TYPE_SUBSCRIBERS);
     $xaction->setNewValue(array('+' => $phids));
 
@@ -2402,9 +2403,11 @@ abstract class PhabricatorApplicationTransactionEditor
     }
 
     $should_cc = false;
+    $override_ts = null;
     foreach ($xactions as $xaction) {
       if ($this->shouldImplyCC($object, $xaction)) {
         $should_cc = true;
+	$override_ts = $xaction->getDangerousOverrideTimeStamp();
         break;
       }
     }
@@ -2434,7 +2437,9 @@ abstract class PhabricatorApplicationTransactionEditor
     $xaction = newv(get_class(head($xactions)), array());
     $xaction->setTransactionType(PhabricatorTransactions::TYPE_SUBSCRIBERS);
     $xaction->setNewValue(array('+' => array($actor_phid)));
-
+    if ($override_ts !== null) {
+      $xaction->setDangerousOverrideTimeStamp($override_ts);
+    }
     array_unshift($xactions, $xaction);
 
     return $xactions;
@@ -3053,10 +3058,11 @@ abstract class PhabricatorApplicationTransactionEditor
     $story_type = $this->getFeedStoryType();
     $story_data = $this->getFeedStoryData($object, $xactions);
 
+    $xaction = $xactions[array_keys($xactions)[0]];
     id(new PhabricatorFeedStoryPublisher())
       ->setStoryType($story_type)
       ->setStoryData($story_data)
-      ->setStoryTime(time())
+      ->setStoryTime($xaction->getDateCreated())
       ->setStoryAuthorPHID($this->getActingAsPHID())
       ->setRelatedPHIDs($related_phids)
       ->setPrimaryObjectPHID($object->getPHID())
@@ -3325,6 +3331,7 @@ abstract class PhabricatorApplicationTransactionEditor
       $template
         ->setTransactionType($xaction->getTransactionType())
         ->setMetadataValue('edge:type', $inverse_type)
+	->setDangerousOverrideTimeStamp($xaction->getDangerousOverrideTimeStamp())
         ->setNewValue(
           array(
             $edge_edit_type => array($object->getPHID() => $object->getPHID()),
diff --git a/src/infrastructure/storage/lisk/LiskDAO.php b/src/infrastructure/storage/lisk/LiskDAO.php
index 94eef7d16..4f5da4b79 100644
--- a/src/infrastructure/storage/lisk/LiskDAO.php
+++ b/src/infrastructure/storage/lisk/LiskDAO.php
@@ -199,6 +199,9 @@ abstract class LiskDAO extends Phobject {
   protected $dateCreated;
   protected $dateModified;
 
+  private $dangerousOverrideID;
+  private $dangerousOverrideTimeStamp;
+
   /**
    *  Build an empty object.
    *
@@ -212,6 +215,38 @@ abstract class LiskDAO extends Phobject {
   }
 
 
+/* -(  Shooting Yourself in the Foot   )------------------------------------- */
+
+  /*
+   * Both of these "dangerous" methods are for overriding when objects
+   * are created/changed and what their IDs are.  This is intended for
+   * (A) writing import scripts from other systems (B) setting up test
+   * scenarios.
+   *
+   * They are dangerous and there is little safety to keep you from
+   * wrecking an install.  There is no guarantee that future versions
+   * of Phabricator will not place logical constraints on the ordering
+   * of timestamps and bad things may happen if you create impossible scenarios.
+   */
+  public function setDangerousOverrideID($id) {
+    $this->dangerousOverrideID = $id;
+    return $this;
+  }
+
+  public function setDangerousOverrideTimeStamp($ts) {
+    $this->dangerousOverrideTimeStamp = $ts;
+    return $this;
+  }
+
+  public function getDangerousOverrideTimeStamp() {
+    if (isset($this->dangerousOverrideTimeStamp)) {
+      return $this->dangerousOverrideTimeStamp;
+    } else {
+      return null;
+    }
+  }
+
+
 /* -(  Managing Connections  )----------------------------------------------- */
 
 
@@ -1201,7 +1236,6 @@ abstract class LiskDAO extends Phobject {
     $data = $this->getAllLiskPropertyValues();
 
     $conn = $this->establishConnection('w');
-
     $id_mechanism = $this->getConfigOption(self::CONFIG_IDS);
     switch ($id_mechanism) {
       case self::IDS_AUTOINCREMENT:
@@ -1209,7 +1243,10 @@ abstract class LiskDAO extends Phobject {
         // ID column, if it is empty. If the caller has explicitly provided a
         // value, use it.
         $id_key = $this->getIDKeyForUse();
-        if (empty($data[$id_key])) {
+        if (isset($this->dangerousOverrideID)) {
+          $this->setID($this->dangerousOverrideID);
+          $data[$id_key] = $this->dangerousOverrideID;
+        } else if (empty($data[$id_key])) {
           unset($data[$id_key]);
         }
         break;
@@ -1217,7 +1254,10 @@ abstract class LiskDAO extends Phobject {
         // If we are using counter IDs, assign a new ID if we don't already have
         // one.
         $id_key = $this->getIDKeyForUse();
-        if (empty($data[$id_key])) {
+        if (isset($this->dangerousOverrideID)) {
+          $this->setID($this->dangerousOverrideID);
+          $data[$id_key] = $this->dangerousOverrideID;
+        } else if (empty($data[$id_key])) {
           $counter_name = $this->getTableName();
           $id = self::loadNextCounterValue($conn, $counter_name);
           $this->setID($id);
@@ -1378,10 +1418,15 @@ abstract class LiskDAO extends Phobject {
     $use_timestamps = $this->getConfigOption(self::CONFIG_TIMESTAMPS);
 
     if ($use_timestamps) {
-      if (!$this->getDateCreated()) {
-        $this->setDateCreated(time());
+      if (isset($this->dangerousOverrideTimeStamp)) {
+        $this->setDateCreated($this->dangerousOverrideTimeStamp);
+        $this->setDateModified($this->dangerousOverrideTimeStamp);
+      } else {
+        if (!$this->getDateCreated()) {
+          $this->setDateCreated(time());
+        }
+        $this->setDateModified(time());
       }
-      $this->setDateModified(time());
     }
 
     if ($this->getConfigOption(self::CONFIG_AUX_PHID) && !$this->getPHID()) {
